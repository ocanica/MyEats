// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyEats.Domain;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MyEats.Domain.Migrations
{
    [DbContext(typeof(MyEatsDataContext))]
    partial class MyEatsDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CuisineEntityRestaurantEntity", b =>
                {
                    b.Property<int>("CuisineId")
                        .HasColumnType("integer");

                    b.Property<Guid>("RestaurantsRestaurantId")
                        .HasColumnType("uuid");

                    b.HasKey("CuisineId", "RestaurantsRestaurantId");

                    b.HasIndex("RestaurantsRestaurantId");

                    b.ToTable("CuisineEntityRestaurantEntity");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.CuisineEntity", b =>
                {
                    b.Property<int>("CuisineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("CuisineId");

                    b.ToTable("Cuisines");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.InOrderEntity", b =>
                {
                    b.Property<int>("InOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("MenuItemId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("InOrderId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("InOrders");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.MenuItemEntity", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uuid");

                    b.HasKey("MenuItemId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.OrderEntity", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateOrdered")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(12,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.PostcodeEntity", b =>
                {
                    b.Property<int>("PostcodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PostcodePrefix")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(100)");

                    b.HasKey("PostcodeId");

                    b.ToTable("Postcodes");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.RestaurantEntity", b =>
                {
                    b.Property<Guid>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CategoryEntityCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Postcode")
                        .HasColumnType("text");

                    b.Property<int>("PostcodeId")
                        .HasColumnType("integer");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("text");

                    b.Property<string>("Town")
                        .HasColumnType("text");

                    b.HasKey("RestaurantId");

                    b.HasIndex("CategoryEntityCategoryId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("PostcodeEntityPostcodeId")
                        .HasColumnType("integer");

                    b.Property<int>("PostcodeId")
                        .HasColumnType("integer");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Town")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("UserId");

                    b.HasIndex("PostcodeEntityPostcodeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PostcodeEntityRestaurantEntity", b =>
                {
                    b.Property<int>("DeliverablePostcodePostcodeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("RestaurantsRestaurantId")
                        .HasColumnType("uuid");

                    b.HasKey("DeliverablePostcodePostcodeId", "RestaurantsRestaurantId");

                    b.HasIndex("RestaurantsRestaurantId");

                    b.ToTable("PostcodeEntityRestaurantEntity");
                });

            modelBuilder.Entity("CuisineEntityRestaurantEntity", b =>
                {
                    b.HasOne("MyEats.Domain.Entities.CuisineEntity", null)
                        .WithMany()
                        .HasForeignKey("CuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEats.Domain.Entities.RestaurantEntity", null)
                        .WithMany()
                        .HasForeignKey("RestaurantsRestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyEats.Domain.Entities.InOrderEntity", b =>
                {
                    b.HasOne("MyEats.Domain.Entities.MenuItemEntity", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEats.Domain.Entities.OrderEntity", "Order")
                        .WithMany("InOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.MenuItemEntity", b =>
                {
                    b.HasOne("MyEats.Domain.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEats.Domain.Entities.RestaurantEntity", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.OrderEntity", b =>
                {
                    b.HasOne("MyEats.Domain.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.RestaurantEntity", b =>
                {
                    b.HasOne("MyEats.Domain.Entities.CategoryEntity", null)
                        .WithMany("Restaurants")
                        .HasForeignKey("CategoryEntityCategoryId");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("MyEats.Domain.Entities.PostcodeEntity", null)
                        .WithMany("Users")
                        .HasForeignKey("PostcodeEntityPostcodeId");
                });

            modelBuilder.Entity("PostcodeEntityRestaurantEntity", b =>
                {
                    b.HasOne("MyEats.Domain.Entities.PostcodeEntity", null)
                        .WithMany()
                        .HasForeignKey("DeliverablePostcodePostcodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyEats.Domain.Entities.RestaurantEntity", null)
                        .WithMany()
                        .HasForeignKey("RestaurantsRestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyEats.Domain.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.OrderEntity", b =>
                {
                    b.Navigation("InOrders");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.PostcodeEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MyEats.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
